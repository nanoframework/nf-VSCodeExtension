# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

trigger:
  branches:
    include:
      - main
      - develop
      - release-*
  paths:
    exclude:
      - .github_changelog_generator
      - .gitignore
      - .markdownlint.json
      - CHANGELOG.md
      - LICENSE.md
      - README.md
      - assets/*
      - config/*
      - .github/*
      - .vscodeignore
      - .gitmodules

# PR always trigger build
pr:
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

jobs:
  
######################
- job: Build_Extension

  pool:
    vmImage: ubuntu-latest

  variables:
    DOTNET_NOLOGO: true
    
  steps:

  # need this here in order to persist GitHub credentials
  - checkout: self
    persistCredentials: true
    submodules: true

  - script: |
      sudo apt-get update
      sudo apt-get install libudev-dev --yes
    displayName: install libudev-dev

  - pwsh: scripts/build.ps1
    displayName: Download and build dependencies for .NET nanoFramework

  - task: DotNetCoreCLI@2
    displayName: Build nanoff
    inputs:
      command: 'build'
      projects: '$(Build.SourcesDirectory)/nanoFirmwareFlasher/nanoFirmwareFlasher.Tool/nanoFirmwareFlasher.Tool.csproj'
      arguments: '-o $(Build.SourcesDirectory)/dist/utils/nanoFirmwareFlasher /p:DefineConstants=VS_CODE_EXTENSION_BUILD /p:RestoreLockedMode=false /p:VSCodeExtensionBuild=True'
  
  - script: chmod -R +x $(Build.SourcesDirectory)/dist/utils/
    displayName: Adding executable rights to utils folder

  - task: DeleteFiles@1
    displayName: Remove source folders
    inputs:
      Contents: |
        v*.zip

  - script: npm ci
    displayName: npm ci
    condition: succeeded()

  # we don't have unit tests
  # - script: npm run test
  #   displayName: Run unit tests
  #   condition: succeeded()
    
  - script: npm run build:prod
    displayName: Build for production
    condition: succeeded()

  - script: npm run package
    env:
      PublicRelease: true
    displayName: Package extension
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Collecting deployable artifacts
    condition: succeeded()
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      contents: |-
        **\vscode-nanoframework.vsix
        **\package.json
        assets/marketplace/vscode-marketplace-overview.md
        assets/marketplace/nano-vs-code.gif
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true

  - task: DotNetCoreCLI@2
    displayName: Install SignTool tool
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . SignClient

  - pwsh: |
      .\SignClient "Sign" `
      --baseDirectory "$(Build.ArtifactStagingDirectory)" `
      --input "**/*.vsix" `
      --config "$(Build.Repository.LocalPath)/config/signClient.json" `
      --filelist "$(Build.Repository.LocalPath)/config/filelist.txt" `
      --user "$(SignClientUser)" `
      --secret '$(SignClientSecret)' `
      --name ".NET nanoFramework VS Code Extension" `
      --description ".NET nanoFramework VS Code Extension" `
      --descriptionUrl "https://github.com/$env:Build_Repository_Name"
    displayName: Sign packages
    continueOnError: true
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

  - bash: |
      echo ">>> Publish"
      yarn deploy
    displayName: Publish to marketplace
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    env:
      VSCE_PAT: $(VSCE_PAT)

  # Publish files as an artifact
  - task: PublishPipelineArtifact@1
    displayName: Publish deployables artifacts
    condition: succeeded()
    inputs:
      artifact: git-mob-vs-code
      targetPath: $(Build.ArtifactStagingDirectory)

  # create or update GitHub release
  - task: GithubRelease@1
    condition: >-
      and(
        succeeded(),
        eq(variables['System.PullRequest.PullRequestId'], ''),
        ne(variables['StartReleaseCandidate'], true)
      )
    displayName: Create/Update GitHub release
    inputs:
      gitHubConnection: 'github.com_nano-$(System.TeamProject)'
      tagSource: userSpecifiedTag
      tag: v$(NBGV_SimpleVersion)
      title: '.NET nanoFramework VS Code extension v$(NBGV_SimpleVersion)'
      assets: '$(Build.ArtifactStagingDirectory)/*.vsix'
      isPreRelease: false
      addChangeLog: true
      releaseNotesSource: inline
      changeLogType: issueBased
      changeLogLabels: |
        [
          { "label" : "Type: bug", "displayName" : "Bugs fixed", "state" : "closed" },
          { "label" : "Type: enhancement", "displayName" : "Enhancements and new features", "state" : "closed" },
          { "label" : "Breaking-Change", "displayName" : "Breaking Changes", "state" : "closed" },
          { "label" : "Type: dependencies", "displayName" : "Dependencies updated", "state" : "closed" },
          { "label" : "Type: documentation", "displayName" : "Documentation", "state" : "closed" }
        ]

##################################
# report build failure to Discord
- job: Report_Build_Failure
  dependsOn:
  - Build_Extension
  - Generate_Changelog
  condition: >-
    or(
      failed('Build_Extension'),
      failed('Generate_Changelog')
    )

  pool:
    vmImage: 'windows-2019'

  steps:

  - checkout: self

  # step from template @ nf-tools repo
  - template: azure-pipelines-templates/discord-webhook.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
